/**
 * Human Interaction Module
 * 
 * Este m√≥dulo gerencia intera√ß√µes humanas necess√°rias durante o processo de automa√ß√£o,
 * como resolu√ß√£o de CAPTCHAs, confirma√ß√£o para continuar ap√≥s bloqueios, etc.
 */

import readline from 'readline';
import puppeteer from 'puppeteer';

// Criar interface para intera√ß√£o por linha de comando
const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

/**
 * Aguarda confirma√ß√£o do usu√°rio para continuar o processo
 * @param {string} message - Mensagem a ser exibida para o usu√°rio
 * @returns {Promise} - Promise que resolve quando o usu√°rio confirma
 */
export function waitForUserConfirmation(message = 'Pressione ENTER para continuar...') {
  return new Promise((resolve) => {
    rl.question(message, () => {
      resolve();
    });
  });
}

/**
 * Aguarda o usu√°rio resolver um CAPTCHA ou outro desafio de seguran√ßa
 * @param {object} page - Inst√¢ncia da p√°gina Puppeteer
 * @param {number} timeoutMs - Tempo m√°ximo para aguardar (em ms)
 * @param {boolean} autoDetect - Tentar detectar automaticamente o CAPTCHA
 * @returns {Promise<boolean>} - Promise que resolve quando o captcha √© resolvido ou timeout
 */
export async function waitForCaptchaResolution(page, timeoutMs = 60000, autoDetect = true) {
  // Verificar se a p√°gina ainda est√° aberta
  if (!page || page.isClosed()) {
    console.log('\n‚ö†Ô∏è P√°gina n√£o est√° mais dispon√≠vel para verificar CAPTCHA.');
    return false;
  }

  console.log('\nüîç Verificando necessidade de intera√ß√£o humana...');
  
  // Verificar se h√° indicadores de CAPTCHA/bloqueio
  let needsHumanInteraction = false;
  try {
    needsHumanInteraction = await detectCaptchaOrBlock(page);
  } catch (error) {
    console.log(`\n‚ö†Ô∏è Erro ao detectar CAPTCHA: ${error.message}`);
    // Em caso de erro, assumir que precisa de intera√ß√£o
    needsHumanInteraction = true;
  }
  
  if (needsHumanInteraction) {
    console.log('\n‚ö†Ô∏è CAPTCHA ou bloqueio detectado!');
    console.log('---------------------------------------------');
    console.log('ü§ñ -> üë§ Transferindo controle para o humano');
    console.log('---------------------------------------------');
    
    // Destacar o navegador para chamar aten√ß√£o do usu√°rio
    try {
      await flashBrowserWindow(page);
    } catch (error) {
      console.log(`\n‚ö†Ô∏è Erro ao destacar janela: ${error.message}`);
    }
    
    console.log('\n‚úÖ Por favor, resolva o CAPTCHA ou desafio no navegador.');
    console.log(`‚è≥ Voc√™ tem ${timeoutMs / 1000} segundos para resolver.`);
    
    // Iniciar timer para monitorar resolu√ß√£o ou timeout
    const startTime = Date.now();
    let resolved = false;
    
    while (Date.now() - startTime < timeoutMs && !resolved) {
      // Aguardar confirma√ß√£o do usu√°rio
      await waitForUserConfirmation('\nüëÜ Digite ENTER ap√≥s resolver o desafio ou digite "skip" para pular: ');
      
      // Verificar se o usu√°rio deseja pular
      const lastAnswer = rl.history && rl.history[0];
      if (lastAnswer && lastAnswer.toLowerCase() === 'skip') {
        console.log('\n‚è≠Ô∏è Pulando este site. Continuando com o pr√≥ximo...');
        return false;
      }
      
      // Verificar se a p√°gina ainda est√° aberta
      if (page.isClosed()) {
        console.log('\n‚ö†Ô∏è A p√°gina foi fechada durante a resolu√ß√£o do CAPTCHA.');
        return false;
      }
      
      // Verificar se o CAPTCHA ainda est√° presente
      try {
        const stillBlocked = await detectCaptchaOrBlock(page);
        
        if (!stillBlocked) {
          console.log('\n‚úÖ Desafio resolvido com sucesso! Continuando...');
          resolved = true;
        } else {
          console.log('\n‚ùå Ainda detectamos o desafio. Tente novamente ou digite "skip" para pular.');
        }
      } catch (error) {
        console.log(`\n‚ö†Ô∏è Erro ao verificar o estado do CAPTCHA: ${error.message}`);
        // Em caso de erro na verifica√ß√£o, assumir que foi resolvido para continuar
        console.log('\n‚úÖ Assumindo que o desafio foi resolvido devido a erro de verifica√ß√£o.');
        resolved = true;
      }
    }
    
    if (!resolved) {
      console.log('\n‚è∞ Tempo esgotado para resolver o desafio. Pulando...');
      return false;
    }
    
    return true;
  } else {
    return true; // N√£o precisa de intera√ß√£o humana
  }
}

/**
 * Detecta se h√° captcha ou bloqueio na p√°gina atual
 * @param {object} page - Inst√¢ncia da p√°gina Puppeteer
 * @returns {Promise<boolean>} - Promise que resolve com true se detectar captcha/bloqueio
 */
export async function detectCaptchaOrBlock(page) {
  // Verificar se a p√°gina ainda est√° aberta
  if (!page || page.isClosed()) {
    throw new Error('P√°gina n√£o est√° dispon√≠vel para detectar captcha');
  }

  try {
    // Verificar padr√µes comuns de texto e elementos de bloqueio/captcha
    const blocked = await page.evaluate(() => {
      const bodyText = document.body ? document.body.innerText.toLowerCase() : '';
      
      if (!document.body) {
        return {detected: false, reason: 'Body n√£o dispon√≠vel'};
      }
      
      // Array com palavras-chave comuns em p√°ginas de bloqueio/captcha
      const blockKeywords = [
        'captcha', 
        'robot', 
        'automated', 
        'bot check', 
        'suspicious activity',
        'unusual traffic', 
        'security check', 
        'human verification',
        'verify you are human',
        'are you a robot',
        'challenge',
        'blocked',
        'access denied',
        'denied access',
        'too many requests',
        'rate limit exceeded',
        'please wait',
        'suspicious',
        'behavior detected',
        'verifica'
      ];
      
      // Verificar cada palavra-chave no texto da p√°gina
      for (const keyword of blockKeywords) {
        if (bodyText.includes(keyword)) {
          return {detected: true, reason: `Texto da p√°gina cont√©m "${keyword}"`};
        }
      }
      
      // Verificar elementos comuns de captcha por seletores
      const captchaSelectors = [
        'iframe[src*="recaptcha"]',
        'iframe[src*="captcha"]',
        'iframe[src*="hcaptcha"]',
        'iframe[src*="funcaptcha"]',
        'iframe[src*="arkoselabs"]',
        'div.g-recaptcha',
        'div.h-captcha',
        'div#captcha',
        'div.captcha',
        'input[name*="captcha"]',
        'img[alt*="captcha"]',
        'form[action*="captcha"]'
      ];
      
      // Verificar cada seletor
      for (const selector of captchaSelectors) {
        if (document.querySelector(selector)) {
          return {detected: true, reason: `Elemento captcha encontrado: "${selector}"`};
        }
      }
      
      // Verificar bloquinhos de imagem para selecionar (tipo reCAPTCHA)
      const gridImages = document.querySelectorAll('table td img, div.rc-imageselect-tile');
      if (gridImages.length > 4) {
        return {detected: true, reason: 'Grid de imagens encontrado (poss√≠vel reCAPTCHA)'};
      }
      
      return {detected: false};
    });
    
    if (blocked.detected) {
      console.log(`üõë Bloqueio detectado: ${blocked.reason}`);
      return true;
    }
    
    return false;
  } catch (error) {
    console.error('Erro ao detectar captcha:', error);
    // Em caso de erro, assumir que h√° bloqueio por seguran√ßa
    return true;
  }
}

/**
 * Destaca a janela do navegador para chamar aten√ß√£o do usu√°rio
 * @param {object} page - Inst√¢ncia da p√°gina Puppeteer
 */
async function flashBrowserWindow(page) {
  // Verificar se a p√°gina ainda est√° aberta
  if (!page || page.isClosed()) {
    throw new Error('P√°gina n√£o est√° dispon√≠vel para destacar janela');
  }

  try {
    // Adicionar borda vermelha piscante para destacar a janela
    await page.evaluate(() => {
      if (!document.head || !document.body) return;
      
      const style = document.createElement('style');
      style.id = 'attention-needed-style';
      style.innerHTML = `
        body {
          animation: flash-border 1s infinite alternate;
          box-shadow: 0 0 20px red !important;
          border: 5px solid red !important;
        }
        
        @keyframes flash-border {
          from { border-color: red !important; }
          to { border-color: yellow !important; }
        }
        
        #attention-banner {
          position: fixed;
          top: 0;
          left: 0;
          right: 0;
          background-color: rgba(255, 0, 0, 0.8);
          color: white;
          text-align: center;
          padding: 15px;
          font-size: 18px;
          z-index: 999999;
          font-weight: bold;
          box-shadow: 0 0 10px rgba(0,0,0,0.5);
        }
      `;
      document.head.appendChild(style);
      
      // Adicionar banner de aten√ß√£o
      const banner = document.createElement('div');
      banner.id = 'attention-banner';
      banner.innerText = '‚ö†Ô∏è ATEN√á√ÉO: A√ß√£o humana necess√°ria! Por favor resolva o CAPTCHA ou desafio ‚ö†Ô∏è';
      document.body.prepend(banner);
      
      // Rolar para o topo para garantir que o usu√°rio veja o banner
      window.scrollTo(0, 0);
    });
    
    // Maximizar a janela para facilitar a visualiza√ß√£o
    try {
      const session = await page.target().createCDPSession();
      await session.send('Browser.setWindowBounds', {
        windowId: 1,
        bounds: { windowState: 'maximized' }
      });
    } catch (error) {
      console.log(`‚ö†Ô∏è Erro ao maximizar janela: ${error.message}`);
    }
    
  } catch (error) {
    console.error('Erro ao destacar janela:', error);
  }
}

/**
 * Remove os elementos visuais adicionados para chamada de aten√ß√£o
 * @param {object} page - Inst√¢ncia da p√°gina Puppeteer
 */
export async function removeVisualAlerts(page) {
  // Verificar se a p√°gina ainda est√° aberta
  if (!page || page.isClosed()) {
    return; // Sai silenciosamente se a p√°gina estiver fechada
  }

  try {
    await page.evaluate(() => {
      if (!document.head || !document.body) return;
      
      const style = document.getElementById('attention-needed-style');
      if (style) style.remove();
      
      const banner = document.getElementById('attention-banner');
      if (banner) banner.remove();
    });
  } catch (error) {
    console.error('Erro ao remover alertas visuais:', error);
  }
}

/**
 * Fecha a interface de linha de comando
 */
export function closeInterface() {
  rl.close();
}

/**
 * Aguarda at√© que uma condi√ß√£o na p√°gina seja atendida ou timeout ocorra
 * @param {object} page - Inst√¢ncia da p√°gina Puppeteer
 * @param {Function} conditionFn - Fun√ß√£o que retorna true/false (executada na p√°gina)
 * @param {number} timeout - Tempo m√°ximo de espera em ms
 * @param {number} checkInterval - Intervalo entre verifica√ß√µes em ms
 * @returns {Promise<boolean>} - Se a condi√ß√£o foi atendida ou n√£o
 */
export async function waitForCondition(page, conditionFn, timeout = 30000, checkInterval = 500) {
  // Verificar se a p√°gina ainda est√° aberta
  if (!page || page.isClosed()) {
    throw new Error('P√°gina n√£o est√° dispon√≠vel para aguardar condi√ß√£o');
  }

  const startTime = Date.now();
  
  while (Date.now() - startTime < timeout) {
    // Verificar se a p√°gina ainda est√° dispon√≠vel
    if (page.isClosed()) {
      throw new Error('P√°gina fechada durante aguardo de condi√ß√£o');
    }
    
    try {
      const conditionMet = await page.evaluate(conditionFn);
      
      if (conditionMet) {
        return true;
      }
    } catch (error) {
      console.log(`‚ö†Ô∏è Erro ao avaliar condi√ß√£o: ${error.message}`);
      return false;
    }
    
    await new Promise(resolve => setTimeout(resolve, checkInterval));
  }
  
  return false;
}

/**
 * Monitora uma p√°gina para detectar mudan√ßas que possam indicar carregamento completo
 * √ötil para sites com carregamento din√¢mico sem eventos de navega√ß√£o
 * @param {object} page - Inst√¢ncia da p√°gina Puppeteer
 * @param {number} stableTime - Tempo em ms sem altera√ß√µes para considerar est√°vel
 * @param {number} maxWaitTime - Tempo m√°ximo total de espera
 * @returns {Promise<boolean>} - Se a p√°gina estabilizou
 */
export async function waitForPageStability(page, stableTime = 3000, maxWaitTime = 20000) {
  // Verificar se a p√°gina ainda est√° aberta
  if (!page || page.isClosed()) {
    throw new Error('P√°gina n√£o est√° dispon√≠vel para aguardar estabilidade');
  }

  console.log('Aguardando estabilidade da p√°gina...');
  
  const startTime = Date.now();
  let lastChangeTime = startTime;
  let domSize = 0;
  
  try {
    // Instalar observador de DOM que atualiza lastChangeTime quando ocorrem mudan√ßas
    await page.evaluate((stableTimeMs) => {
      window.__lastChange = Date.now();
      
      try {
        const observer = new MutationObserver(() => {
          window.__lastChange = Date.now();
        });
        
        if (document.body) {
          observer.observe(document.body, {
            attributes: true,
            childList: true,
            subtree: true
          });
        }
        
        // Tamb√©m monitorar eventos de rede e XHR
        const originalXHROpen = XMLHttpRequest.prototype.open;
        XMLHttpRequest.prototype.open = function() {
          window.__lastChange = Date.now();
          return originalXHROpen.apply(this, arguments);
        };
        
        // Auto-clean ap√≥s o tempo est√°vel
        setTimeout(() => {
          observer.disconnect();
          XMLHttpRequest.prototype.open = originalXHROpen;
        }, stableTimeMs + 1000);
      } catch (e) {
        console.error('Erro no observer:', e);
      }
    }, stableTime);
  } catch (error) {
    console.log(`‚ö†Ô∏è Erro ao configurar monitoramento de estabilidade: ${error.message}`);
    return false; // Em caso de erro, presume que a p√°gina est√° est√°vel
  }
  
  // Verificar se a p√°gina est√° est√°vel
  while (Date.now() - startTime < maxWaitTime) {
    // Verificar se a p√°gina ainda est√° dispon√≠vel
    if (page.isClosed()) {
      throw new Error('P√°gina fechada durante aguardo de estabilidade');
    }
    
    try {
      // Verificar √∫ltima altera√ß√£o e tamanho atual do DOM
      const stats = await page.evaluate(() => {
        return {
          lastChange: window.__lastChange || Date.now(),
          domSize: document.body ? document.body.innerHTML.length : 0
        };
      });
      
      // Se o tamanho do DOM mudou, atualizar lastChangeTime
      if (stats.domSize !== domSize) {
        lastChangeTime = Date.now();
        domSize = stats.domSize;
      }
      
      // Verificar se a p√°gina est√° est√°vel pelo tempo m√≠nimo
      if (Date.now() - lastChangeTime >= stableTime) {
        console.log('P√°gina estabilizada!');
        return true;
      }
    } catch (error) {
      console.log(`‚ö†Ô∏è Erro durante verifica√ß√£o de estabilidade: ${error.message}`);
      return false; // Em caso de erro, presume que a p√°gina est√° est√°vel
    }
    
    // Aguardar antes da pr√≥xima verifica√ß√£o
    await new Promise(resolve => setTimeout(resolve, 500));
  }
  
  console.log(`Tempo m√°ximo (${maxWaitTime}ms) atingido sem estabilidade completa.`);
  return true; // Considera est√°vel ap√≥s tempo m√°ximo
}